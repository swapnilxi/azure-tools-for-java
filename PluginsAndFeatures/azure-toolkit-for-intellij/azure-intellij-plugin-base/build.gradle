plugins {
    id "org.jetbrains.intellij" version "1.12.0"
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "de.undercouch.download" version "4.1.1"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "io.freefair.aspectj.post-compile-weaving" version "6.5.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

ext {
    azureToolkitVersion = "0.29.0-SNAPSHOT"
    azureToolkitUtilsVersion = "3.73.0-SNAPSHOT"
}

group 'com.microsoft.azure.toolkit'
apply plugin: 'java'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

intellij {
    pluginName = 'azure-intellij-plugin-base'
    version = intellij_version
    plugins = ['java', 'maven', 'maven-model', 'gradle', dep_plugins]
    downloadSources = Boolean.valueOf(sources)
}

gradle.taskGraph.whenReady { graph ->
    def hasRootRunTask = graph.hasTask(':runIde')

    if (hasRootRunTask) {
        graph.getAllTasks().each { task ->
            // look for *:runIde
            def subRunTask = (task.path =~ /:.+:runIde/)
            if (subRunTask) {
                println "TRACER skipping ${task.path} because ':runIde' was specified"
                task.enabled = false
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.aspectj.post-compile-weaving'
    apply plugin: 'io.spring.dependency-management'
    ext {
        azureToolkitVersion = "0.29.0-SNAPSHOT"
        azureToolkitUtilsVersion = "3.73.0-SNAPSHOT"
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'com.microsoft.azure.toolkit'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version = intellij_version
        updateSinceUntilBuild = false
        downloadSources = Boolean.valueOf(sources)
    }

    dependencyManagement {
        imports {
            mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
            mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
        }
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.microsoft.azure:azure-toolkit-common-lib'
        aspect 'com.microsoft.azure:azure-toolkit-common-lib'
        compileOnly 'org.jetbrains:annotations'
    }

    buildSearchableOptions.onlyIf {false}
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

allprojects {
    configurations {
        implementation.exclude module:'slf4j-api'
        implementation.exclude module:'log4j'
        implementation.exclude module:'stax-api'
        implementation.exclude module:'groovy-xml'
        implementation.exclude module:'groovy-templates'
        cucumberRuntime {
            extendsFrom testImplementation
        }
    }
}

dependencyManagement {
    imports {
        mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
        mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
    }
}

dependencies {
    implementation 'com.microsoft.azure:azure-toolkit-auth-lib:' + azureToolkitVersion
    implementation 'com.microsoft.azure:azure-toolkit-ide-common-lib:' + azureToolkitVersion

    implementation project(':azure-intellij-plugin-lib')
    implementation project(':azure-intellij-plugin-service-explorer')

    def modules = IntellijPluginModules.split(",")
    modules.each { m ->
        implementation project(':' + m)
    }

    aspect "com.microsoft.azure:azure-toolkit-common-lib", {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
}

wrapper() {
    gradleVersion = '7.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

String timestamp = (new Date()).format('yyyyMMddHHmmss')
ext.getPatchedVersion = {
    if (Boolean.valueOf(needPatchVersion) || pluginVersion.endsWith("SNAPSHOT")) {
        if (pluginVersion.endsWith("SNAPSHOT")) {
            def fixedPluginVersion = pluginVersion.split("-")
            return "${fixedPluginVersion[0]}-${intellijDisplayVersion}-SNAPSHOT.${timestamp}"
        } else {
            return "${pluginVersion}-${intellijDisplayVersion}-BETA.${timestamp}"
        }
    } else {
        return "${pluginVersion}-${intellijDisplayVersion}"
    }
}

patchPluginXml {
    version = getPatchedVersion()
    sinceBuild = patchPluginXmlSinceBuild
}

buildPlugin {
    archiveVersion = getPatchedVersion()
}
