plugins {
    id "org.jetbrains.intellij" version "1.12.0"
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "de.undercouch.download" version "4.1.1"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "io.freefair.aspectj.post-compile-weaving" version "6.5.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

ext {
    azureToolkitVersion = "0.29.0-SNAPSHOT"
    azureToolkitUtilsVersion = "3.73.0-SNAPSHOT"
    azureToolkitHDInsightVersion = "0.1.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion
    ajc {
        enabled = false
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = javaVersion
    ajc {
        enabled = false
    }
}

//import com.microsoft.azuretools.plugins.BundleBuildIDEAPlugin

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    filesMatching('**/ApplicationInsights.xml') {
        filter(ReplaceTokens, tokens: ["applicationinsights.key": project.property("applicationinsights.key")])
    }
}

group 'com.microsoft.azuretools'
apply plugin: 'java'

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

//apply plugin: 'checkstyle'
//
//checkstyle {
//    toolVersion = '8.30'
//    configFile = new File('config/checkstyle/checkstyle.xml')
//    showViolations = false
//}

intellij {
    pluginName = 'azure-toolkit-for-intellij'
    version = intellij_version
    updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
    plugins = ['java', 'maven', 'maven-model', 'gradle', dep_plugins, "properties", 'terminal', 'gradle-java']
    downloadSources = Boolean.valueOf(sources)
}


// disable runIde tasks in subprojects to prevent starting-up multiple ide.
gradle.taskGraph.whenReady { graph ->
    def hasRootRunTask = graph.hasTask(':runIde')

    if (hasRootRunTask) {
        graph.getAllTasks().each { task ->
            // look for *:runIde
            def subRunTask = (task.path =~ /:.+:runIde/)
            if (subRunTask) {
                println "TRACER skipping ${task.path} because ':runIde' was specified"
                task.enabled = false
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.aspectj.post-compile-weaving'
    apply plugin: 'io.spring.dependency-management'
    ext {
        azureToolkitVersion = "0.29.0-SNAPSHOT"
        azureToolkitUtilsVersion = "3.73.0-SNAPSHOT"
        azureToolkitHDInsightVersion = "0.1.0"
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    group = 'com.microsoft.azuretools'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version = intellij_version
        updateSinceUntilBuild = false
        downloadSources = Boolean.valueOf(sources)
    }

    dependencyManagement {
        imports {
            mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
            mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
            mavenBom 'com.microsoft.azuretools:utils:' + azureToolkitUtilsVersion
            mavenBom 'com.microsoft.hdinsight:azure-toolkit-ide-hdinsight-libs:' + azureToolkitHDInsightVersion
        }
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'com.microsoft.azure:azure-toolkit-common-lib'
        aspect 'com.microsoft.azure:azure-toolkit-common-lib'
        compileOnly 'org.jetbrains:annotations'
    }

    buildSearchableOptions.onlyIf { false }
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        kotlin.srcDirs 'src/main/kotlin'
        resources {
            srcDir 'src/main/resources'
            exclude 'bundle/**'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        kotlin.srcDirs 'src/test/kotlin'
        resources {
            srcDir 'src/test/resources'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

allprojects {
    configurations {
        implementation.exclude module: 'slf4j-api'
        implementation.exclude module: 'log4j'
        implementation.exclude module: 'stax-api'
        implementation.exclude module: 'groovy-xml'
        implementation.exclude module: 'groovy-templates'
        cucumberRuntime {
            extendsFrom testImplementation
        }
    }
}

dependencyManagement {
    imports {
        mavenBom 'com.microsoft.azure:azure-toolkit-libs:' + azureToolkitVersion
        mavenBom 'com.microsoft.azure:azure-toolkit-ide-libs:' + azureToolkitVersion
        mavenBom 'com.microsoft.azuretools:utils:' + azureToolkitUtilsVersion
        mavenBom 'com.microsoft.hdinsight:azure-toolkit-ide-hdinsight-libs:' + azureToolkitHDInsightVersion
    }
}

dependencies {
    implementation project(':azure-intellij-plugin-lib')
    implementation project(':azure-intellij-plugin-lib-java')
    implementation project(':azure-sdk-reference-book')
    implementation project(':azure-intellij-resource-connector-lib')
    implementation project(':azure-intellij-resource-connector-lib-java')
    implementation project(':azure-intellij-resource-connector-aad')
    implementation project(':azure-intellij-plugin-vm')
    implementation project(':azure-intellij-plugin-springcloud')
    implementation project(':azure-intellij-plugin-storage')
    implementation project(':azure-intellij-plugin-redis')
    implementation project(':azure-intellij-plugin-service-explorer')
    implementation project(':azure-intellij-plugin-database')
    implementation project(':azure-intellij-plugin-database-java')
    implementation project(':azure-intellij-plugin-appservice')
    implementation project(':azure-intellij-plugin-appservice-java')
    implementation project(':azure-intellij-plugin-arm')
    implementation project(':azure-intellij-plugin-containerregistry')
    implementation project(':azure-intellij-plugin-containerservice')
    implementation project(':azure-intellij-plugin-applicationinsights')
    implementation project(':azure-intellij-plugin-guidance')
    implementation project(':azure-intellij-plugin-cosmos')
    implementation project(':azure-intellij-plugin-bicep')
    implementation project(':azure-intellij-plugin-containerapps')
    implementation project(':azure-intellij-plugin-monitor')
    implementation project(':azure-intellij-plugin-hdinsight')
    implementation 'com.microsoft.hdinsight:azure-toolkit-ide-hdinsight-spark-lib'
    implementation 'com.microsoft.azure:azure-toolkit-ide-appservice-lib'
    implementation 'com.microsoft.azure:azure-toolkit-applicationinsights-lib'
    implementation 'com.microsoft.azure:azure-toolkit-storage-lib'
    implementation 'com.microsoft.azure:azure-mgmt-eventhub'
    aspect "com.microsoft.azure:azure-toolkit-common-lib", {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
    implementation 'com.microsoft.azure:azure-client-runtime', {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okhttp3", module: "okhttp-urlconnection"
        exclude group: "com.squareup.okhttp3", module: "logging-interceptor"
    }
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-lang3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.microsoft.azuretools:azuretools-core:3.73.0-SNAPSHOT', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    implementation 'com.microsoft.azuretools:azure-explorer-common:3.73.0-SNAPSHOT', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    implementation 'com.microsoft.azuretools:hdinsight-node-common:3.73.0-SNAPSHOT', {
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }

    implementation 'com.spotify:docker-client:8.16.0'
    implementation group: 'org.dom4j', name: 'dom4j', {
        exclude group: "javax.xml.stream", module: "stax-api"
        exclude group: "xpp3", module: "xpp3"
        exclude group: "pull-parser", module: "pull-parser"
        exclude group: "net.java.dev.msv", module: "xsdlib"
    }
    implementation group: 'jaxen', name: 'jaxen', version: '1.2.0'

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21")
    implementation 'net.java.dev.jna:jna:5.12.1'
    testImplementation 'io.cucumber:cucumber-java:7.0.0'
    testImplementation 'io.cucumber:cucumber-junit:7.0.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'junit:junit'
    testImplementation 'org.mockito:mockito-core'

    testImplementation 'org.powermock:powermock-module-junit4:1.7.0RC4'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC4'
    testImplementation 'javax.servlet:javax.servlet-api:4.0.1'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

test {
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task cucumberPackJar(type: Jar) {
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.cucumberRuntime.files.collect {
                it.toURI().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}

buildSearchableOptions.onlyIf { false }

task cucumber() {
    dependsOn assemble, testClasses, compileTestJava, cucumberPackJar
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = files(sourceSets.main.output, sourceSets.test.output, cucumberPackJar.archivePath)
            args = [
                    '--plugin', 'progress',
                    '--glue', 'com.microsoft.azure.hdinsight.spark.common',
                    '-m',
                    'Test/resources']
        }
    }
}

test.dependsOn cucumber
// buildPlugin.dependsOn test

defaultTasks 'buildPlugin'

wrapper() {
    gradleVersion = '7.5.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

//apply plugin: BundleBuildIDEAPlugin

//installIdea.dependsOn buildPlugin
//installIdea.dependsOn checkstyleMain
String timestamp = (new Date()).format('yyyyMMddHHmmss')
ext.getPatchedVersion = {
    if (Boolean.valueOf(needPatchVersion) || pluginVersion.endsWith("SNAPSHOT")) {
        if (pluginVersion.endsWith("SNAPSHOT")) {
            def fixedPluginVersion = pluginVersion.split("-")
            return "${fixedPluginVersion[0]}-${intellijDisplayVersion}-SNAPSHOT.${timestamp}"
        } else {
            return "${pluginVersion}-${intellijDisplayVersion}-BETA.${timestamp}"
        }
    } else {
        return "${pluginVersion}-${intellijDisplayVersion}"
    }
}

patchPluginXml {
    version = getPatchedVersion()
    sinceBuild = patchPluginXmlSinceBuild
}

task prepareBicepBinariesForSandbox(type: Copy) {
    def bicepBinariesDir = file("$projectDir/build/idea-sandbox/plugins/azure-toolkit-for-intellij/bicep")
    bicepBinariesDir.deleteDir();
    from("$projectDir/azure-intellij-plugin-bicep/binaries") into("$projectDir/build/idea-sandbox/plugins/azure-toolkit-for-intellij/")
}

task downloadBicepLanguageServer(type: Copy) {
    def langServerDir = file('azure-intellij-plugin-bicep/binaries/bicep/bicep-langserver')
    if (!langServerDir.exists()) {
        logger.info('Downloading bicep language server ...')
        def zipFile = new File('azure-intellij-plugin-bicep/downloaded.zip')
        new URL('https://aka.ms/java-toolkit-bicep-ls').withInputStream { i -> zipFile.withOutputStream { it << i } }
        logger.info('Unzipping bicep language server ...')
        from zipTree(zipFile) into langServerDir
    }
}

buildPlugin {
    archiveVersion = getPatchedVersion()
    from("$projectDir/NOTICE")
    // buildPlugin zips result of `prepareSandbox`, so no need to copy again?
    // copy bicep textmate bundles/language server files to root of the plugin zip, so that we don't need to unzip them manually from jar resources
    //    from("$projectDir/azure-intellij-plugin-bicep/binaries")
}

prepareSandbox {
    dependsOn(downloadBicepLanguageServer)
    finalizedBy(prepareBicepBinariesForSandbox)
}
